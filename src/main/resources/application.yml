amap:
  api:
    key: 2e7273dfce78babea2da965990bd842f 

server:
  port: 8080

spring:
  application:
    name: geocode-service
  main:
    allow-bean-definition-overriding: true
  datasource:
    url: ${MYSQL_URL:jdbc:mysql://localhost:3306/dynamic_menu?useSSL=false&serverTimezone=Asia/Shanghai}
    username: ${MYSQL_USER:root}
    password: ${MYSQL_PASSWORD:1234}
    driver-class-name: com.mysql.cj.jdbc.Driver
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
  security:
    web:
      exclude-filter:
        - /doc.html 
        - /webjars/**
        - /v3/**
        - /swagger-resources/**
    oauth2:
      client:
        registration:
          github:
            client-id: ${GITHUB_CLIENT_ID:Ov23liyVfRNTV8m1IyjF}
            client-secret: ${GITHUB_CLIENT_SECRET:c465e7b15d0e2935c2067c99a06e890f8ef430c4}
            scope: user:email,read:user
          google:
            client-id: ${GOOGLE_CLIENT_ID:your-google-client-id}
            client-secret: ${GOOGLE_CLIENT_SECRET:your-google-client-secret}
            scope: profile,email
      # 授权服务器配置
      authorization-server:
        client:
          client:
            registration:
              client-id: client
              client-secret: "{noop}secret"
              client-authentication-methods:
                - client_secret_basic
              authorization-grant-types:
                - authorization_code
                - refresh_token
                - client_credentials
              redirect-uris:
                - http://127.0.0.1:8080/login/oauth2/code/client
                - http://127.0.0.1:8080/authorized
              scopes:
                - openid
                - profile
                - read
                - write
              require-authorization-consent: true
      # 资源服务器配置
      resourceserver:
        jwt:
          jwk-set-uri: http://localhost:8080/.well-known/jwks.json

file:
  upload-dir: ./uploads
  upload:
    temp-dir: /tmp/invoice_uploads
    max-size: 10MB

mybatis-plus:
  configuration:
    # 控制台打印 SQL 日志（可选）
#    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    # 开启下划线转驼峰
    map-underscore-to-camel-case: true
    # 启用二级缓存
    cache-enabled: true
    default-enum-type-handler: com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler
  global-config:
    db-config:
      # 主键生成策略（AUTO 表示数据库自增或雪花ID等）
      id-type: AUTO
  # Mapper XML 文件路径（支持多级目录）
  mapper-locations: classpath*:/mapper/**/*Mapper.xml
  # 实体类别名包路径（改成你的实际路径）
  type-aliases-package: com.example.demo.dto
  
springdoc:
  swagger-ui:
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: alpha
  api-docs:
    path: /v3/api-docs
  group-configs:
    - group: 'default'
      paths-to-match: '/**'
    

jwt:
  secret: ${JWT_SECRET:nh2309y5bh2kl5jbh43kj5h2kj4h5kj2h45j2h45jk2h45kj2h45kj2h45k24jhg5jkh}
  expiration: 86400000  # 一天
  refresh-expiration: 604800000  # 一周

crawler:
  target:
    url: https://example.com
  save:
    directory: ./downloaded-images
  allowed:
    extensions: .jpg,.jpeg,.png,.gif
    
invoice:
  templates:
    location: classpath:/templates/
    default: standard_vat

tesseract:
  datapath: /usr/share/tesseract-ocr/4.00/tessdata
  languages: chi_sim+eng

# 日志配置
logging:
  level:
    root: INFO
    org.springframework.security: DEBUG
    org.springframework.security.oauth2: DEBUG
    org.springframework.security.oauth2.jwt: TRACE  # 添加JWT处理的详细日志
    com.example.demo.filter.JwtAuthenticationFilter: DEBUG

# OAuth2初始化配置
oauth2:
  init:
    enabled: true  # 是否在应用启动时初始化OAuth2数据库